// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lulu.proto

#ifndef PROTOBUF_lulu_2eproto__INCLUDED
#define PROTOBUF_lulu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_lulu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsask_meImpl();
void InitDefaultsask_me();
void InitDefaultstell_youImpl();
void InitDefaultstell_you();
inline void InitDefaults() {
  InitDefaultsask_me();
  InitDefaultstell_you();
}
}  // namespace protobuf_lulu_2eproto
namespace lulu {
class ask_me;
class ask_meDefaultTypeInternal;
extern ask_meDefaultTypeInternal _ask_me_default_instance_;
class tell_you;
class tell_youDefaultTypeInternal;
extern tell_youDefaultTypeInternal _tell_you_default_instance_;
}  // namespace lulu
namespace lulu {

// ===================================================================

class ask_me : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lulu.ask_me) */ {
 public:
  ask_me();
  virtual ~ask_me();

  ask_me(const ask_me& from);

  inline ask_me& operator=(const ask_me& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ask_me(ask_me&& from) noexcept
    : ask_me() {
    *this = ::std::move(from);
  }

  inline ask_me& operator=(ask_me&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ask_me& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ask_me* internal_default_instance() {
    return reinterpret_cast<const ask_me*>(
               &_ask_me_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ask_me* other);
  friend void swap(ask_me& a, ask_me& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ask_me* New() const PROTOBUF_FINAL { return New(NULL); }

  ask_me* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ask_me& from);
  void MergeFrom(const ask_me& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ask_me* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lulu.ask_me)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_lulu_2eproto::TableStruct;
  friend void ::protobuf_lulu_2eproto::InitDefaultsask_meImpl();
};
// -------------------------------------------------------------------

class tell_you : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lulu.tell_you) */ {
 public:
  tell_you();
  virtual ~tell_you();

  tell_you(const tell_you& from);

  inline tell_you& operator=(const tell_you& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tell_you(tell_you&& from) noexcept
    : tell_you() {
    *this = ::std::move(from);
  }

  inline tell_you& operator=(tell_you&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const tell_you& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tell_you* internal_default_instance() {
    return reinterpret_cast<const tell_you*>(
               &_tell_you_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(tell_you* other);
  friend void swap(tell_you& a, tell_you& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tell_you* New() const PROTOBUF_FINAL { return New(NULL); }

  tell_you* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tell_you& from);
  void MergeFrom(const tell_you& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tell_you* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string answer = 2;
  void clear_answer();
  static const int kAnswerFieldNumber = 2;
  const ::std::string& answer() const;
  void set_answer(const ::std::string& value);
  #if LANG_CXX11
  void set_answer(::std::string&& value);
  #endif
  void set_answer(const char* value);
  void set_answer(const char* value, size_t size);
  ::std::string* mutable_answer();
  ::std::string* release_answer();
  void set_allocated_answer(::std::string* answer);

  // uint32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::uint32 ret() const;
  void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:lulu.tell_you)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr answer_;
  ::google::protobuf::uint32 ret_;
  mutable int _cached_size_;
  friend struct ::protobuf_lulu_2eproto::TableStruct;
  friend void ::protobuf_lulu_2eproto::InitDefaultstell_youImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ask_me

// uint32 id = 1;
inline void ask_me::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 ask_me::id() const {
  // @@protoc_insertion_point(field_get:lulu.ask_me.id)
  return id_;
}
inline void ask_me::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lulu.ask_me.id)
}

// repeated string name = 2;
inline int ask_me::name_size() const {
  return name_.size();
}
inline void ask_me::clear_name() {
  name_.Clear();
}
inline const ::std::string& ask_me::name(int index) const {
  // @@protoc_insertion_point(field_get:lulu.ask_me.name)
  return name_.Get(index);
}
inline ::std::string* ask_me::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:lulu.ask_me.name)
  return name_.Mutable(index);
}
inline void ask_me::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:lulu.ask_me.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ask_me::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:lulu.ask_me.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ask_me::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lulu.ask_me.name)
}
inline void ask_me::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lulu.ask_me.name)
}
inline ::std::string* ask_me::add_name() {
  // @@protoc_insertion_point(field_add_mutable:lulu.ask_me.name)
  return name_.Add();
}
inline void ask_me::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lulu.ask_me.name)
}
#if LANG_CXX11
inline void ask_me::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lulu.ask_me.name)
}
#endif
inline void ask_me::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lulu.ask_me.name)
}
inline void ask_me::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lulu.ask_me.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ask_me::name() const {
  // @@protoc_insertion_point(field_list:lulu.ask_me.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ask_me::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:lulu.ask_me.name)
  return &name_;
}

// -------------------------------------------------------------------

// tell_you

// uint32 ret = 1;
inline void tell_you::clear_ret() {
  ret_ = 0u;
}
inline ::google::protobuf::uint32 tell_you::ret() const {
  // @@protoc_insertion_point(field_get:lulu.tell_you.ret)
  return ret_;
}
inline void tell_you::set_ret(::google::protobuf::uint32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:lulu.tell_you.ret)
}

// string answer = 2;
inline void tell_you::clear_answer() {
  answer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tell_you::answer() const {
  // @@protoc_insertion_point(field_get:lulu.tell_you.answer)
  return answer_.GetNoArena();
}
inline void tell_you::set_answer(const ::std::string& value) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lulu.tell_you.answer)
}
#if LANG_CXX11
inline void tell_you::set_answer(::std::string&& value) {
  
  answer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lulu.tell_you.answer)
}
#endif
inline void tell_you::set_answer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lulu.tell_you.answer)
}
inline void tell_you::set_answer(const char* value, size_t size) {
  
  answer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lulu.tell_you.answer)
}
inline ::std::string* tell_you::mutable_answer() {
  
  // @@protoc_insertion_point(field_mutable:lulu.tell_you.answer)
  return answer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tell_you::release_answer() {
  // @@protoc_insertion_point(field_release:lulu.tell_you.answer)
  
  return answer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tell_you::set_allocated_answer(::std::string* answer) {
  if (answer != NULL) {
    
  } else {
    
  }
  answer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answer);
  // @@protoc_insertion_point(field_set_allocated:lulu.tell_you.answer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lulu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lulu_2eproto__INCLUDED
